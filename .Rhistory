r[66:68] <- NA
d <- gridDistance(r)
plot(d)
plot(r)
mask_full
r
a <- as(r, "raster")
a <- as(r, "Raster")
a <- raster(r)
library(raster)
a <- as(r, "Raster")
plot(r)
plot(a)
source('read_track.r')
source('associate_storm.r')
# Load sample data --------------------------------------------------------
stormtrack <- st_read("data/EXAMPLE_track_timestep.geojson")
interest <- st_read("data/england_wales_box.geojson")
precip <- terra::rast("data/EXAMPLE_era5_precip.tif")
# Run association function ------------------------------------------------
assoc_results <- associate_storm(stormtrack, precip, interest, 250, 1.5)
library(sf)
library(terra)
library(tidyverse)
source('read_track.r')
source('associate_storm.r')
# Load sample data --------------------------------------------------------
stormtrack <- st_read("data/EXAMPLE_track_timestep.geojson")
interest <- st_read("data/england_wales_box.geojson")
precip <- terra::rast("data/EXAMPLE_era5_precip.tif")
# Run association function ------------------------------------------------
assoc_results <- associate_storm(stormtrack, precip, interest, 250, 1.5)
?geom_sf
precip
ggplot() + geom_spatraster(precip)
install.packages('tidyterra')
library(tidyterra)
ggplot() + geom_spatraster(precip)
ggplot() + geom_spatraster(data=precip)
library(sf)
library(terra)
library(tidyverse)
source('read_track.r')
source('associate_storm.r')
# Load sample data --------------------------------------------------------
stormtrack <- st_read("data/EXAMPLE_track_timestep.geojson")
interest <- st_read("data/england_wales_box.geojson")
precip <- terra::rast("data/EXAMPLE_era5_precip.tif")
# Run association function ------------------------------------------------
assoc_results <- associate_storm(stormtrack, precip, interest, 250, 1.5)
precip
ggplot() + geom_spatraster(data=precip)
warnings()
debugSource("C:/Users/ruari/OneDrive/Documents/R_scripts/CPA/xxx_Example.R")
assoc_results <- associate_storm(stormtrack, precip, interest, precip_threshold, track_threshold)
precip_threshold <- 1.5 #mm hr-1
track_threshold <- 250 # threshold in km
# End user input ----------------------------------------------------------
library(sf)
library(terra)
library(tidyverse)
source('read_track.r')
source('associate_storm.r')
# Load sample data --------------------------------------------------------
stormtrack <- st_read("data/EXAMPLE_track_timestep.geojson")
interest <- st_read("data/england_wales_box.geojson")
precip <- terra::rast("data/EXAMPLE_era5_precip.tif")
# Run association function ------------------------------------------------
assoc_results <- associate_storm(stormtrack, precip, interest, precip_threshold, track_threshold)
precip_threshold <- 1.5 #mm hr-1
track_threshold <- 250 # threshold in km
library(sf)
library(terra)
library(tidyverse)
source('read_track.r')
source('associate_storm.r')
stormtrack <- st_read("data/EXAMPLE_track_timestep.geojson")
interest <- st_read("data/england_wales_box.geojson")
precip <- terra::rast("data/EXAMPLE_era5_precip.tif")
assoc_results <- associate_storm(stormtrack, precip, interest, precip_threshold, track_threshold)
storms <- stormtrack
precip_threshold <- 1.5 #mm hr-1
track_threshold <- 250 # threshold in km
# End user input ----------------------------------------------------------
library(sf)
library(terra)
library(tidyverse)
source('read_track.r')
source('associate_storm.r')
# Load sample data --------------------------------------------------------
storms <- st_read("data/EXAMPLE_track_timestep.geojson")
interest <- st_read("data/england_wales_box.geojson")
precip <- terra::rast("data/EXAMPLE_era5_precip.tif")
require(mapiso)
require(terra)
require(sf)
require(gdistance)
require(geosphere)
require(tidyterra)
# NB: requiring raster and sp will throw a deprecation warning. This is currently
# required for interaction with gDistance, but should be replaced entirely
# with terra once gDistance is updated or an alternative is produced.
require(raster)
require(sp)
# Find centroid of interest region -----------------------------------
interest_centroid <- st_centroid(interest)
# Create precip contour ---------------------------------------------
# Create contour
precip_contour <- mapiso(precip, breaks = precip_threshold)
# Exclude the outer contour
precip_contour <- subset(precip_contour, isomin == precip_threshold)
# Crop stormtracks to precip data region
storms_cropped <- st_crop(storms, terra::ext(precip))
# Create 250km buffer around tracks
storms_lambert <- st_transform(storms_cropped, "EPSG:3035")
storms_buffer <- st_buffer(storms_lambert, storm_radius * 1000)
storm_radius <- 250 # threshold in km
# Reproject buffer back to lat/lon for consistency
storms_buffer <- st_transform(storms_buffer, "EPSG:4326")
# Crop stormtracks to precip data region
storms_cropped <- st_crop(storms, terra::ext(precip))
# Create 250km buffer around tracks
storms_lambert <- st_transform(storms_cropped, "EPSG:3035")
storms_buffer <- st_buffer(storms_lambert, storm_radius * 1000)
# Reproject buffer back to lat/lon for consistency
storms_buffer <- st_transform(storms_buffer, "EPSG:4326")
# Create mask layer to generate paths through fronts and track buffers
mask_base <- precip
mask_base[] <- 1
# Need to convert masking vectors to SpatVector for compatibility with Terra
precip_contour_sv <- vect(precip_contour)
storms_buffer_sv <- vect(storms_buffer)
interest_sv <- vect(interest)
# Add precip contours to mask
mask_precip <- terra::mask(mask_base, precip_contour_sv)
mask_precip[is.na(mask_precip)] <- 0
# Add track buffers to mask
mask_track <- terra::mask(mask_base, storms_buffer_sv)
mask_track[is.na(mask_track)] <- 0
# Add interest area to mask
mask_interest <- terra::mask(mask_base, interest_sv)
mask_interest[is.na(mask_interest)] <- 0
# Combine mask layers
mask_full <- mask_precip + mask_track + mask_interest
mask_full[mask_full > 0] <- 1
mask_full[mask_full == 0] <- NA
# DEV NOTE: Currently gDistance only accepts raster::raster inputs,
# not terra::spatRaster. For now, the mask will be converted to a raster
# object for distance calculation. However, note that many of the
# raster prerequisites are being deprecated, and the geospatial R community
# is moving towards replacing raster operations with terra.
# This section should be re-visited if/when gDistance is updated or
# an alternative package produced that accepts terra inputs.
mask_full <- as(mask_full, "Raster")
# Convert storm tracks to SPDF for compatibility with gDistance
# DEV NOTE: Note the deprecation warning above - replace with sf when possible.
track_pts <- as(storms, "Spatial")
interest_pt <- as(interest_centroid, "Spatial")
# Create a transition layer using gdistance package
tl <- transition(mask_full, transitionFunction = mean, directions = 4)
# Attempt to find the shortest valid path from the interest region centroid
# to each storm track point. If no valid path can be found, NA is returned
paths <- list()
for(i in 1:nrow(track_pts)){
paths[[i]] <- tryCatch(
shortestPath(tl, interest_pt, track_pts[i,], output = "SpatialLines"),
error = function(e){return(NA)})
}
candidate_pts <- track_pts[which(!is.na(paths)),]
candidate_paths <- paths[!is.na(paths)]
# If multiple possible tracks are found, get their lengths and return the shortest
line_lengths <- list()
if(length(candidate_paths) > 1){
for(i in 1:length(candidate_paths)){
line_lengths[[i]] <- lengthLine(candidate_paths[[i]])
}
} else {
line_lengths[[1]] <- lengthLine(candidate_paths[[1]])
}
line_lengths <- unlist(line_lengths)
shortest_line <- which.min(line_lengths)
matched_pt <- candidate_pts[shortest_line,]
matched_path <- st_as_sf(candidate_paths[[shortest_line]])
# Create basemap ----------------------------------------------------------
world <- map_data("world") %>%
st_as_sf(coords = c("long","lat"), crs = st_crs("epsg:4326")) %>%
st_crop(terra::ext(precip))
map_data("world") %>%
st_as_sf(coords = c("long","lat"), crs = st_crs("epsg:4326"))
world <- map_data("world")
world
world <- map_data("world") %>%
st_as_sf(coords = c("long","lat"), crs = st_crs("epsg:4326"))
terra::ext(precip)
world <- map_data("world") %>%
st_as_sf(coords = c("long","lat"), crs = st_crs("epsg:4326")) %>%
st_crop(terra::ext(precip))
world <- map_data("world") %>%
st_as_sf(coords = c("long","lat"), crs = st_crs("epsg:4326"))
world
plot(world)
?map_data
# Create basemap ----------------------------------------------------------
world <- st_read("data/worldmap.geojson")
# Create basemap ----------------------------------------------------------
world <- st_read("data/worldmap.geojson") %>%
st_crop(terra::ext(precip))
world
plot(world)
# Create basemap ----------------------------------------------------------
world <- st_read("data/worldmap.geojson") %>%
st_crop(terra::ext(precip)) %>%
st_transform(4326)
plot(world)
# Create basemap ----------------------------------------------------------
world <- st_read("data/worldmap.geojson") %>%
st_transform(4326) %>%
st_crop(terra::ext(precip))
plot(world)
world <- st_read("data/worldmap.geojson")
plot(world)
plot(terra::ext(precip), add = T)
plot(terra::ext(precip))
# Create basemap ----------------------------------------------------------
world <- st_read("data/worldmap.geojson") %>%
st_transform(4326) %>%
st_crop(terra::ext(precip))
plot(world)
ggplot(world) + geom_sf
ggplot(world) + geom_sf()
# Create basemap ----------------------------------------------------------
world <- st_read("data/worldmap.geojson") %>%
st_transform(4326)
ggplot(world) + geom_sf()
precip
# Draw map -------------------------------------------------------------
p <-
ggplot() +
geom_spatraster(data = precip) +
geom_map(
data = world, map = world,
aes(map_id = region),
fill = NA, colour = "grey80"
) +
geom_sf(data = precip_contour, aes(colour = "Precipitation regions"), fill = NA) +
geom_sf(data = storms, aes(colour = "Storm track points"), size = 3) +
geom_sf(data = matched_pt, aes(colour = "Matched storm"), size = 3) +
geom_sf(data = storms_buffer, aes(colour = "Storm track tolerance"), size = 2, fill = NA) +
geom_sf(data = interest, aes(colour = "Region of interest"), size = 2, fill = NA) +
geom_sf(data = matched_path, aes(colour = "Matched path")) +
scale_fill_viridis_c("Total precip (mm/hour)") +
scale_colour_manual(
"Legend",
values = c(
"Precipitation regions" = "red",
"Matched storm" = "red",
"Storm track points" = "orange",
"Storm track tolerance" = "orange",
"Region of interest" = "purple",
"Matched path" = "green"
)
)
# Draw map -------------------------------------------------------------
p <-
ggplot() +
geom_spatraster(data = precip) +
geom_sf(data = world) +
geom_sf(data = precip_contour, aes(colour = "Precipitation regions"), fill = NA) +
geom_sf(data = storms, aes(colour = "Storm track points"), size = 3) +
geom_sf(data = matched_pt, aes(colour = "Matched storm"), size = 3) +
geom_sf(data = storms_buffer, aes(colour = "Storm track tolerance"), size = 2, fill = NA) +
geom_sf(data = interest, aes(colour = "Region of interest"), size = 2, fill = NA) +
geom_sf(data = matched_path, aes(colour = "Matched path")) +
scale_fill_viridis_c("Total precip (mm/hour)") +
scale_colour_manual(
"Legend",
values = c(
"Precipitation regions" = "red",
"Matched storm" = "red",
"Storm track points" = "orange",
"Storm track tolerance" = "orange",
"Region of interest" = "purple",
"Matched path" = "green"
)
)
class(world)
class(precip_contour)
class(storms)
class(matched_pt)
class(matched_path)
matched_pt <- st_as_sf(candidate_pts[shortest_line,])
# Draw map -------------------------------------------------------------
p <-
ggplot() +
geom_spatraster(data = precip) +
geom_sf(data = world) +
geom_sf(data = precip_contour, aes(colour = "Precipitation regions"), fill = NA) +
geom_sf(data = storms, aes(colour = "Storm track points"), size = 3) +
geom_sf(data = matched_pt, aes(colour = "Matched storm"), size = 3) +
geom_sf(data = storms_buffer, aes(colour = "Storm track tolerance"), size = 2, fill = NA) +
geom_sf(data = interest, aes(colour = "Region of interest"), size = 2, fill = NA) +
geom_sf(data = matched_path, aes(colour = "Matched path")) +
scale_fill_viridis_c("Total precip (mm/hour)") +
scale_colour_manual(
"Legend",
values = c(
"Precipitation regions" = "red",
"Matched storm" = "red",
"Storm track points" = "orange",
"Storm track tolerance" = "orange",
"Region of interest" = "purple",
"Matched path" = "green"
)
)
p
# Create basemap ----------------------------------------------------------
world <- st_read("data/worldmap.geojson") %>%
st_transform(4326) %>%
st_crop(extent(precip))
# Create basemap ----------------------------------------------------------
world <- st_read("data/worldmap.geojson") %>%
st_transform(4326) %>%
st_crop(ext(precip))
# Draw map -------------------------------------------------------------
p <-
ggplot() +
geom_spatraster(data = precip) +
geom_sf(data = world) +
geom_sf(data = precip_contour, aes(colour = "Precipitation regions"), fill = NA) +
geom_sf(data = storms, aes(colour = "Storm track points"), size = 3) +
geom_sf(data = matched_pt, aes(colour = "Matched storm"), size = 3) +
geom_sf(data = storms_buffer, aes(colour = "Storm track tolerance"), size = 2, fill = NA) +
geom_sf(data = interest, aes(colour = "Region of interest"), size = 2, fill = NA) +
geom_sf(data = matched_path, aes(colour = "Matched path")) +
scale_fill_viridis_c("Total precip (mm/hour)") +
scale_colour_manual(
"Legend",
values = c(
"Precipitation regions" = "red",
"Matched storm" = "red",
"Storm track points" = "orange",
"Storm track tolerance" = "orange",
"Region of interest" = "purple",
"Matched path" = "green"
)
)
p
ext(precip)
as(ext(precip), "sf")
st_as_sf(ext(precip))
as.spatvector(ext(precip))
as(ext(precip), "spatvector")
as(ext(precip), "SpatVector")
as.polygons(ext(precip))
st_as_sf(as.polygons(ext(precip)))
# Create basemap ----------------------------------------------------------
world <- st_read("data/worldmap.geojson") %>%
st_transform(4326) %>%
st_crop(st_as_sf(as.polygons(ext(precip))))
world
plot(world)
st_as_sf(as.polygons(ext(precip)))
st_as_sf(as.polygons(ext(precip)), crs = st_crs(4326))
st_as_sf(as.polygons(ext(precip)), crs = st_crs("epsg:4326"))
?st_as_sf
st_as_sf(as.polygons(ext(precip)), crs = 4326)
a <- st_as_sf(as.polygons(ext(precip)))
st_crs(a) <- 4326
a
# Create basemap ----------------------------------------------------------
area_extent <- st_as_sf(as.polygons(ext(precip)))
st_crs(area_extent) <- 4326
world <- st_read("data/worldmap.geojson") %>%
st_crop(area_extent)
plot(world)
# User input --------------------------------------------------------------
precip_threshold <- 1.5 #mm hr-1
storm_radius <- 250 # threshold in km
# End user input ----------------------------------------------------------
library(sf)
library(terra)
library(tidyverse)
source('read_track.r')
source('associate_storm.r')
# Load sample data --------------------------------------------------------
storms <- st_read("data/EXAMPLE_track_timestep.geojson")
interest <- st_read("data/england_wales_box.geojson")
precip <- terra::rast("data/EXAMPLE_era5_precip.tif")
# Run association function ------------------------------------------------
assoc_results <- associate_storm(stormtrack, precip, interest, precip_threshold, track_threshold)
require(mapiso)
require(terra)
require(sf)
require(gdistance)
require(geosphere)
require(tidyterra)
# NB: requiring raster and sp will throw a deprecation warning. This is currently
# required for interaction with gDistance, but should be replaced entirely
# with terra once gDistance is updated or an alternative is produced.
require(raster)
require(sp)
# Find centroid of interest region -----------------------------------
interest_centroid <- st_centroid(interest)
# Create precip contour ---------------------------------------------
# Create contour
precip_contour <- mapiso(precip, breaks = precip_threshold)
# Exclude the outer contour
precip_contour <- subset(precip_contour, isomin == precip_threshold)
# Crop stormtracks to precip data region
storms_cropped <- st_crop(storms, terra::ext(precip))
# Create 250km buffer around tracks
storms_lambert <- st_transform(storms_cropped, "EPSG:3035")
storms_buffer <- st_buffer(storms_lambert, storm_radius * 1000)
# Reproject buffer back to lat/lon for consistency
storms_buffer <- st_transform(storms_buffer, "EPSG:4326")
# Create mask layer to generate paths through fronts and track buffers
mask_base <- precip
mask_base[] <- 1
# Need to convert masking vectors to SpatVector for compatibility with Terra
precip_contour_sv <- vect(precip_contour)
storms_buffer_sv <- vect(storms_buffer)
interest_sv <- vect(interest)
# Add precip contours to mask
mask_precip <- terra::mask(mask_base, precip_contour_sv)
mask_precip[is.na(mask_precip)] <- 0
# Add track buffers to mask
mask_track <- terra::mask(mask_base, storms_buffer_sv)
mask_track[is.na(mask_track)] <- 0
# Add interest area to mask
mask_interest <- terra::mask(mask_base, interest_sv)
mask_interest[is.na(mask_interest)] <- 0
# Combine mask layers
mask_full <- mask_precip + mask_track + mask_interest
mask_full[mask_full > 0] <- 1
mask_full[mask_full == 0] <- NA
# DEV NOTE: Currently gDistance only accepts raster::raster inputs,
# not terra::spatRaster. For now, the mask will be converted to a raster
# object for distance calculation. However, note that many of the
# raster prerequisites are being deprecated, and the geospatial R community
# is moving towards replacing raster operations with terra.
# This section should be re-visited if/when gDistance is updated or
# an alternative package produced that accepts terra inputs.
mask_full <- as(mask_full, "Raster")
# Convert storm tracks to SPDF for compatibility with gDistance
# DEV NOTE: Note the deprecation warning above - replace with sf when possible.
track_pts <- as(storms, "Spatial")
interest_pt <- as(interest_centroid, "Spatial")
# Create a transition layer using gdistance package
tl <- transition(mask_full, transitionFunction = mean, directions = 4)
# Attempt to find the shortest valid path from the interest region centroid
# to each storm track point. If no valid path can be found, NA is returned
paths <- list()
for(i in 1:nrow(track_pts)){
paths[[i]] <- tryCatch(
shortestPath(tl, interest_pt, track_pts[i,], output = "SpatialLines"),
error = function(e){return(NA)})
}
candidate_pts <- track_pts[which(!is.na(paths)),]
candidate_paths <- paths[!is.na(paths)]
# If multiple possible tracks are found, get their lengths and return the shortest
line_lengths <- list()
if(length(candidate_paths) > 1){
for(i in 1:length(candidate_paths)){
line_lengths[[i]] <- lengthLine(candidate_paths[[i]])
}
} else {
line_lengths[[1]] <- lengthLine(candidate_paths[[1]])
}
line_lengths <- unlist(line_lengths)
shortest_line <- which.min(line_lengths)
matched_pt <- st_as_sf(candidate_pts[shortest_line,])
matched_path <- st_as_sf(candidate_paths[[shortest_line]])
# Create basemap ----------------------------------------------------------
area_extent <- st_as_sf(as.polygons(ext(precip)))
st_crs(area_extent) <- 4326
world <- st_read("data/worldmap.geojson") %>%
st_crop(area_extent)
# Draw map -------------------------------------------------------------
p <-
ggplot() +
geom_spatraster(data = precip) +
geom_sf(data = world) +
geom_sf(data = precip_contour, aes(colour = "Precipitation regions"), fill = NA) +
geom_sf(data = storms, aes(colour = "Storm track points"), size = 3) +
geom_sf(data = matched_pt, aes(colour = "Matched storm"), size = 3) +
geom_sf(data = storms_buffer, aes(colour = "Storm track tolerance"), size = 2, fill = NA) +
geom_sf(data = interest, aes(colour = "Region of interest"), size = 2, fill = NA) +
geom_sf(data = matched_path, aes(colour = "Matched path")) +
scale_fill_viridis_c("Total precip (mm/hour)") +
scale_colour_manual(
"Legend",
values = c(
"Precipitation regions" = "red",
"Matched storm" = "red",
"Storm track points" = "orange",
"Storm track tolerance" = "orange",
"Region of interest" = "purple",
"Matched path" = "green"
)
)
class(stormtrack)
class(Storms)
class(storms)
class(precip)
class(interest)
class(precip_threshold)
class(track_threshold)
storms <- st_read("data/EXAMPLE_track_timestep.geojson")
interest <- st_read("data/england_wales_box.geojson")
precip <- terra::rast("data/EXAMPLE_era5_precip.tif")
# Run association function ------------------------------------------------
assoc_results <- associate_storm(storms, precip, interest, precip_threshold, track_threshold)
